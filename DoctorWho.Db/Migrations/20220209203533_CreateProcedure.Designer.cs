// <auto-generated />
using DoctorWho.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DoctorWho.Db.Migrations
{
    [DbContext(typeof(DoctorWhoCoreDbContext))]
    [Migration("20220209203533_CreateProcedure")]
    partial class CreateProcedure
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DoctorWho.Db.DataModels.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthorName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            AuthorName = "Ahmad"
                        },
                        new
                        {
                            AuthorId = 2,
                            AuthorName = "Osama"
                        },
                        new
                        {
                            AuthorId = 3,
                            AuthorName = "Jamil"
                        },
                        new
                        {
                            AuthorId = 4,
                            AuthorName = "Tareq"
                        },
                        new
                        {
                            AuthorId = 5,
                            AuthorName = "Rami"
                        });
                });

            modelBuilder.Entity("DoctorWho.Db.DataModels.Companion", b =>
                {
                    b.Property<int>("CompanionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhoPlayed")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanionId");

                    b.ToTable("Companions");

                    b.HasData(
                        new
                        {
                            CompanionId = 1,
                            CompanionName = "Thor"
                        },
                        new
                        {
                            CompanionId = 2,
                            CompanionName = "Dr. Strange"
                        },
                        new
                        {
                            CompanionId = 3,
                            CompanionName = "Captain"
                        },
                        new
                        {
                            CompanionId = 4,
                            CompanionName = "Ironman"
                        },
                        new
                        {
                            CompanionId = 5,
                            CompanionName = "Back Widow"
                        });
                });

            modelBuilder.Entity("DoctorWho.Db.DataModels.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BirthDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("DoctorNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("FirstEpisodeDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastEpisodeDate")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DoctorId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            DoctorId = 1,
                            BirthDate = "14/02/1999",
                            DoctorName = "Hazem",
                            DoctorNumber = 599154866L,
                            FirstEpisodeDate = "05/12/2010",
                            LastEpisodeDate = "06/02/2015"
                        },
                        new
                        {
                            DoctorId = 2,
                            BirthDate = "29/07/1990",
                            DoctorName = "Malak",
                            DoctorNumber = 598264767L,
                            FirstEpisodeDate = "01/01/2015",
                            LastEpisodeDate = "16/03/2017"
                        },
                        new
                        {
                            DoctorId = 3,
                            BirthDate = "22/10/1998",
                            DoctorName = "Rayyan",
                            DoctorNumber = 597965571L,
                            FirstEpisodeDate = "09/02/2013",
                            LastEpisodeDate = "06/06/2018"
                        },
                        new
                        {
                            DoctorId = 4,
                            BirthDate = "26/06/2000",
                            DoctorName = "Lujain",
                            DoctorNumber = 597050633L,
                            FirstEpisodeDate = "15/04/2017",
                            LastEpisodeDate = "12/12/2020"
                        },
                        new
                        {
                            DoctorId = 5,
                            BirthDate = "25/09/1977",
                            DoctorName = "Fatima",
                            DoctorNumber = 599856299L,
                            FirstEpisodeDate = "15/12/2013",
                            LastEpisodeDate = "11/03/2015"
                        });
                });

            modelBuilder.Entity("DoctorWho.Db.DataModels.Enemy", b =>
                {
                    b.Property<int>("EnemyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnemyName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EnemyId");

                    b.ToTable("Enemies");

                    b.HasData(
                        new
                        {
                            EnemyId = 1,
                            Description = "Mind Control",
                            EnemyName = "Thanos"
                        },
                        new
                        {
                            EnemyId = 2,
                            Description = "Shapeshifting",
                            EnemyName = "Hela"
                        },
                        new
                        {
                            EnemyId = 3,
                            Description = "Invisibility",
                            EnemyName = "Loki"
                        },
                        new
                        {
                            EnemyId = 4,
                            Description = "Immortality",
                            EnemyName = "Glactus"
                        },
                        new
                        {
                            EnemyId = 5,
                            Description = "Time travel",
                            EnemyName = "DoomsDay"
                        });
                });

            modelBuilder.Entity("DoctorWho.Db.DataModels.Episode", b =>
                {
                    b.Property<int>("EpisodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("EpisodeDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EpisodeNumber")
                        .HasColumnType("int");

                    b.Property<string>("EpisodeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeriesNumber")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EpisodeId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("DoctorId");

                    b.ToTable("Episodes");

                    b.HasData(
                        new
                        {
                            EpisodeId = 1,
                            AuthorId = 1,
                            DoctorId = 1,
                            EpisodeDate = "06/02/2015",
                            EpisodeNumber = 1,
                            EpisodeType = "Horror",
                            SeriesNumber = 5,
                            Title = ""
                        },
                        new
                        {
                            EpisodeId = 2,
                            AuthorId = 4,
                            DoctorId = 3,
                            EpisodeDate = "25/04/2021",
                            EpisodeNumber = 100,
                            EpisodeType = "Drama",
                            SeriesNumber = 16,
                            Title = "Legally Blonde"
                        },
                        new
                        {
                            EpisodeId = 3,
                            AuthorId = 4,
                            DoctorId = 2,
                            EpisodeDate = "08/03/2019",
                            EpisodeNumber = 1,
                            EpisodeType = "Sci-Fi",
                            SeriesNumber = 5,
                            Title = "Star Wars"
                        },
                        new
                        {
                            EpisodeId = 4,
                            AuthorId = 1,
                            DoctorId = 5,
                            EpisodeDate = "22/10/2018",
                            EpisodeNumber = 22,
                            EpisodeType = "Thriller",
                            SeriesNumber = 6,
                            Title = "Fast and Furious"
                        },
                        new
                        {
                            EpisodeId = 5,
                            AuthorId = 3,
                            DoctorId = 2,
                            EpisodeDate = "16/12/2015",
                            EpisodeNumber = 2,
                            EpisodeType = "Comedy",
                            SeriesNumber = 3,
                            Title = "Dumb and Dumber"
                        });
                });

            modelBuilder.Entity("DoctorWho.Db.DataModels.EpisodeCompanion", b =>
                {
                    b.Property<int>("EpisodeId")
                        .HasColumnType("int");

                    b.Property<int>("CompanionId")
                        .HasColumnType("int");

                    b.HasKey("EpisodeId", "CompanionId");

                    b.HasIndex("CompanionId");

                    b.ToTable("EpisodeCompanion");

                    b.HasData(
                        new
                        {
                            EpisodeId = 1,
                            CompanionId = 2
                        },
                        new
                        {
                            EpisodeId = 3,
                            CompanionId = 5
                        },
                        new
                        {
                            EpisodeId = 2,
                            CompanionId = 2
                        },
                        new
                        {
                            EpisodeId = 4,
                            CompanionId = 1
                        },
                        new
                        {
                            EpisodeId = 5,
                            CompanionId = 4
                        });
                });

            modelBuilder.Entity("DoctorWho.Db.DataModels.EpisodeEnemy", b =>
                {
                    b.Property<int>("EpisodeId")
                        .HasColumnType("int");

                    b.Property<int>("EnemyId")
                        .HasColumnType("int");

                    b.HasKey("EpisodeId", "EnemyId");

                    b.HasIndex("EnemyId");

                    b.ToTable("EpisodeEnemy");

                    b.HasData(
                        new
                        {
                            EpisodeId = 4,
                            EnemyId = 3
                        },
                        new
                        {
                            EpisodeId = 4,
                            EnemyId = 5
                        },
                        new
                        {
                            EpisodeId = 4,
                            EnemyId = 1
                        },
                        new
                        {
                            EpisodeId = 2,
                            EnemyId = 5
                        },
                        new
                        {
                            EpisodeId = 1,
                            EnemyId = 1
                        });
                });

            modelBuilder.Entity("DoctorWho.Db.DataModels.Episode", b =>
                {
                    b.HasOne("DoctorWho.Db.DataModels.Author", "Author")
                        .WithMany("Episodes")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoctorWho.Db.DataModels.Doctor", "Doctor")
                        .WithMany("Episodes")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DoctorWho.Db.DataModels.EpisodeCompanion", b =>
                {
                    b.HasOne("DoctorWho.Db.DataModels.Companion", null)
                        .WithMany("EpisodeCompanions")
                        .HasForeignKey("CompanionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoctorWho.Db.DataModels.Episode", null)
                        .WithMany("EpisodeCompanions")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DoctorWho.Db.DataModels.EpisodeEnemy", b =>
                {
                    b.HasOne("DoctorWho.Db.DataModels.Enemy", null)
                        .WithMany("EpisodeEnemies")
                        .HasForeignKey("EnemyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoctorWho.Db.DataModels.Episode", null)
                        .WithMany("EpisodeEnemies")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
